REM   Script: A33
REM   a33

CREATE TABLE TASK 
(TASK_NAME VARCHAR (20) CONSTRAINT TASK_TASK_NAME_PK PRIMARY KEY, 
TASK_START DATE, 
TASK_END DATE);

CREATE TABLE VOLUNTEERS  
(VOLUNTEER_ID CHAR (5) CONSTRAINT VOLUNTEER_VALUNTEER_ID_PK PRIMARY KEY, 
F_NAME VARCHAR (20), 
L_NAME VARCHAR (20), 
TASK_NAME VARCHAR (20) NOT NULL, 
CONSTRAINT VOLUNTEERS_TASK_NAME_FK FOREIGN KEY (TASK_NAME) REFERENCES TASK);

CREATE TABLE PACKAGES 
(PACKAGE_ID CHAR (5) CONSTRAINT PACKAGES_PACKAGE_ID_PK PRIMARY KEY, 
PACKAGE_DATE DATE, 
PACKAGE_WEIGHT NUMBER (20,2), 
ITEM_ID VARCHAR (5) NOT NULL, 
CONSTRAINT PACKAGES_ITEM_ID_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM);

CREATE TABLE PACKAGES 
(PACKAGE_ID CHAR (5) CONSTRAINT PACKAGES_PACKAGE_ID_PK PRIMARY KEY, 
PACKAGE_DATE DATE, 
PACKAGE_WEIGHT NUMBER (20,2), 
ITEM_ID VARCHAR (5) NOT NULL, 
CONSTRAINT PACKAGES_ITEM_ID_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM);

CREATE TABLE ITEM  
(ITEM_ID VARCHAR(5) CONSTRAINT ITEM_ITEM_ID_PK PRIMARY KEY, 
ITEM_DESC VARCHAR (20), 
ITEM_VALUE VARCHAR (20), 
ITEM_QUANTITY VARCHAR (10));

CREATE TABLE PACKAGES 
(PACKAGE_ID CHAR (5) CONSTRAINT PACKAGES_PACKAGE_ID_PK PRIMARY KEY, 
PACKAGE_DATE DATE, 
PACKAGE_WEIGHT NUMBER (20,2), 
ITEM_ID VARCHAR (5) NOT NULL, 
CONSTRAINT PACKAGES_ITEM_ID_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM);

CREATE SEQUENCE vol_num_seq 
START WITH 9000 
INCREMENT BY 10 
MINVALUE 9000 
MAXVALUE 15000;

INSERT INTO TASK VALUES ('PACKING', TO_DATE ('10/05/2021 9:00','DD/MM/YYYY HH:MI'), TO_DATE ('20/05/2021 12:00','DD/MM/YYYY HH:MI'));

INSERT INTO TASK VALUES ('ANSWERING PHONE', TO_DATE ('11/05/2021 10:00','DD/MM/YYYY HH:MI'), TO_DATE ('21/05/2021 12:00','DD/MM/YYYY HH:MI'));

INSERT INTO TASK VALUES ('PRINTING FILES', TO_DATE ('12/05/2021 7:00','DD/MM/YYYY HH:MI'), TO_DATE ('22/05/2021 11:00','DD/MM/YYYY HH:MI'));

INSERT INTO VOLUNTEERS VALUES ('Ash','Kanagiah','PACKING');

INSERT INTO VOLUNTEERS VALUES ('1001', 'Ash','Kanagiah','PACKING');

INSERT INTO VOLUNTEERS VALUES ('10002', 'Bri','Centro','ANSWERING PHONE');

INSERT INTO VOLUNTEERS VALUES ('10003', 'Andrew','Tremblay','PRINTING FILES');

INSERT INTO ITEM VALUES ('23232', 'Medical supplies','2000','5000');

INSERT INTO ITEM VALUES ('12121', 'Food supplies','5000','10000');

INSERT INTO ITEM VALUES ('54545', 'Hygiene supplies','8000','8000');

INSERT INTO PACKAGES VALUES ('20001', TO_DATE ('12/05/2021','DD/MM/YYYY'),'100.10','23232');

INSERT INTO PACKAGES VALUES ('20002', TO_DATE ('20/06/2021','DD/MM/YYYY'),'600.50','12121');

INSERT INTO PACKAGES VALUES ('20003', TO_DATE ('15/07/2021','DD/MM/YYYY'),'1000.20','54545');

CREATE OR REPLACE VIEW all_volunteer  
AS SELECT * 
FROM VOLUNTEERS 
WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

SELECT * FROM VOLUNTEERS 
;

CREATE OR REPLACE VIEW all_volunteer  
AS SELECT * VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME 
FROM VOLUNTEERS 
WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

CREATE OR REPLACE VIEW all_volunteer  
AS (SELECT VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME) 
FROM VOLUNTEERS 
WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

CREATE OR REPLACE VIEW all_volunteer  
AS SELECT VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME 
FROM VOLUNTEERS 
WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

CREATE VIEW all_volunteer  
AS SELECT VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME 
FROM VOLUNTEERS 
WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

CREATE VIEW all_volunteer  
AS SELECT VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME 
  FROM VOLUNTEERS 
  WHERE TASK_NAME = NOT NULL 
WITH READ ONLY;

CREATE VIEW all_volunteer  
AS SELECT VOLUNTEER_ID, F_NAME, L_NAME, TASK_NAME 
  FROM VOLUNTEERS 
  WHERE TASK_NAME = NOT NULL 
  GROUP BY VOLUNTEER_ID 
WITH READ ONLY;

CREATE OR REPLACE PROCEDURE VOL_TASK_SEARCH (TASK_DATE IN DATE, FNAME IN CHAR, LNAME IN CHAR)  
AS  
BEGIN  
    SELECT TA., V. * 
    FROM TASK TA JOIN VOLUNTEERS V ON TA.TASK_NAME = V.TASK_NAME  
    WHERE TA.TASK_START = TASK_DATE AND V.F_NAME = FNAME AND V.L_NAME = LNAME;  
END;
/

SELECT * FROM TASK 
;

CREATE OR REPLACE PROCEDURE VOL_TASK_SEARCH (START_DATE IN DATE, F_NAME IN CHAR, L_NAME IN CHAR)  
AS  
BEGIN  
    SELECT TA., V. * 
    FROM TASK TA JOIN VOLUNTEERS V ON TA.TASK_NAME = V.TASK_NAME  
    WHERE TA.TASK_START = TASK_DATE AND V.F_NAME = FNAME AND V.L_NAME = LNAME;  
END;
/

CREATE OR REPLACE PROCEDURE NOT_ASSIGNED_TASK  
AS  
BEGIN  
    SELECT COUNT(*) FROM VOLUNTEERS 
    WHERE TASK_NAME = NULL; 
END;
/

CREATE OR REPLACE PROCEDURE PACKAGE_DATE_SEARCH (P_DATE IN DATE) 
AS  
BEGIN 
    SELECT * FROM PACKAGES 
    WHERE PACKAGE_DATE = P_DATE; 
END;
/

CREATE PROCEDURE VOL_TASK_SEARCH (STARTDATE IN DATE, FNAME IN CHAR, LNAME IN CHAR)  
AS  
BEGIN  
    SELECT TA., V. * 
    FROM TASK TA JOIN VOLUNTEERS V ON TA.TASK_NAME = V.TASK_NAME  
    WHERE TA.TASK_START = TASK_DATE AND V.F_NAME = FNAME AND V.L_NAME = LNAME;  
END;
/

CREATE PROCEDURE VOL_TASK_SEARCH (TASKDATE IN DATE, FNAME IN CHAR, LNAME IN CHAR)  
AS  
BEGIN  
    SELECT TA., V. * 
    FROM TASK TA JOIN VOLUNTEERS V ON TA.TASK_NAME = V.TASK_NAME  
    WHERE TA.TASK_START = TASK_DATE AND V.F_NAME = FNAME AND V.L_NAME = LNAME;  
END; 

/

CREATE PROCEDURE PACKAGE_DATE_SEARCH (P_DATE IN DATE) 
AS  
BEGIN 
    SELECT * FROM PACKAGES 
    WHERE PACKAGE_DATE = P_DATE; 
END;
/

CREATE PROCEDURE NOT_ASSIGNED_TASK  
AS  
BEGIN  
    SELECT COUNT(*) FROM VOLUNTEERS 
    WHERE TASK_NAME = NULL; 
END;
/

ALTER TABLE TASK  
ADD CONSTRAINT CHECK_TIME CHECK (TASK_START <= TASK_END);

CREATE OR REPLACE TRIGGER trg_updatestatus 
AFTER UPDATE OR INSERT 
ON TASK 
BEGIN 
WHEN (TASK_STATUS = 'open'  
       TASK_STATUS = 'ongoing'  
       TASK_STATUS = 'close'); 
END;   
/

CREATE TRIGGER trg_updatestatus 
AFTER UPDATE OR INSERT 
ON TASK 
BEGIN 
WHEN (TASK_STATUS = 'open'  
       TASK_STATUS = 'ongoing'  
       TASK_STATUS = 'close'); 
END; 
/

SELECT * FROM TASK 
;

CREATE OR REPLACE TRIGGER trg_updatestatus 
AFTER UPDATE OR INSERT 
ON TASK 
BEGIN 
INSERT ROW TASK_STATUS  
ON TASK 
WHEN (TASK_STATUS = 'open'  
       TASK_STATUS = 'ongoing'  
       TASK_STATUS = 'close'); 
END; 
/

SELECT * FROM TASK 
;

ALTER TABLE TASK  
INSERT ROW TASK_TABLE 
ADD CONSTRAINT CHECK_STATUS CHECK (TASK_STATUS = 'ONGOING' OR 'OPEN' OR 'CLOSE');

SELECT * FROM TASK 
;

CREATE OR REPLACE TRIGGER trg_updatestatus 
AFTER UPDATE OR INSERT 
ON TASK 
BEGIN 
INSERT ROW TASK_STATUS  
ON TASK 
WHERE (TASK_STATUS = 'open'  
       TASK_STATUS = 'ongoing'  
       TASK_STATUS = 'close'); 
IF (TASK_END) 
INSERT INTO TASK VALUES ('CLOSE') 
END IF; 
END;  
/

SELECT * FROM TASK 
;

CREATE OR REPLACE TRIGGER trg_updatestatus 
AFTER UPDATE OR INSERT 
ON TASK 
BEGIN 
INSERT ROW TASK_STATUS  
ON TASK 
WHERE (TASK_STATUS = 'open'  
       TASK_STATUS = 'ongoing'  
       TASK_STATUS = 'close'); 
IF (TASK_END) 
INSERT INTO TASK VALUES (TASK_NAME, TASK_START, TASK_END, 'CLOSE'); 
END IF; 
END; 
/

